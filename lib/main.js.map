{"version":3,"sources":["../src/main.js"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["'use strict';\nconst util = require('util');\nrequire('util.promisify').shim();\nconst fs = require('fs'),\n    path = require('path'),\n    Transform = require('stream').Transform,\n    File = require('vinyl'),\n    readFile = util.promisify(fs.readFile),\n    /**\n     * Kills dragons, saves virgins and splits things.\n     * @param content {String}\n     * @returns {Array}\n     */\n    katana = function (content) {\n        return content.split('\\n');\n    },\n\n    /**\n     * Combines things, previuosly splited by katana().\n     * @param arr\n     * @returns {String}\n     */\n    glue = function (arr) {\n        return arr.join('\\n');\n    },\n\n    /**\n     * Shifts to other dimensions and teleports lines according to include scope.\n     * @param arr {Array}\n     * @param scope {String}\n     * @returns {Array}\n     */\n    shifter = function (arr, scope) {\n        let line = -1;\n        while (++line < arr.length) {\n            arr[line] = scope + arr[line];\n        }\n        return arr;\n    },\n\n    /**\n     * Pass may only those who includes something extra, others have to simply pass through.\n     * @param content {String}\n     * @param file_path {String}\n     * @returns {String|Promise.<String>}\n     */\n    bouncer = async function (content, file_path) {\n        const deps = hr_department(content, file_path);\n        if (deps.length > 0) {\n            return await octopus_whisperer(katana(content), deps, file_path).catch((err) => console.log(err))\n        } else {\n            return content;\n        }\n    },\n\n    /**\n     * Like bookworm, but reads strings.\n     * @param splited {Array}\n     * @param deps {Array}\n     * @param i {Number}\n     * @param loc {String}\n     * @returns {Promise.<Promise>}\n     */\n    stringworm = async function (splited, deps, i, loc) {\n        return readFile(loc).then(async (data) => {\n            splited[deps[i].line] = await bouncer(data.toString(), loc).catch((err) => console.log(err));\n            splited[deps[i].line] = glue(shifter(katana(splited[deps[i].line]), deps[i].scope));\n        }).catch((err) => {\n            throw new Error(err)\n        });\n    },\n\n    /**\n     * One of multitasking monsters, can't stand why can't you do two things parallel.\n     * @param splited {Array}\n     * @param deps {Array}\n     * @param filePath {String}\n     * @yields {Promise.<Promise>}\n     */\n    octopus = function* (splited, deps, filePath) {\n        for (let i = 0; i < deps.length; i++) {\n            const loc = path.join(path.dirname(filePath), deps[i].incPath);\n            yield stringworm(splited, deps, i, loc).catch((err) => console.log(err))\n        }\n    },\n\n    /**\n     * Says multitasking monster what it wants, and they do.\n     * @param splited {Array}\n     * @param deps {Array}\n     * @param filePath {String}\n     * @returns {Promise.<string>}\n     */\n    octopus_whisperer = async function (splited, deps, filePath) {\n        const pending = [];\n        for (const i of octopus(splited, deps, filePath)) {\n            pending.push(i)\n        }\n        await Promise.all(pending).catch((err) => console.log(err));\n        return glue(splited)\n    },\n\n    /**\n     * Looks deeply into content and finds who are more, and who are less more.\n     * @param content {String}\n     * @param filePath {String}\n     * @returns {Array}\n     */\n    hr_department = function (content, filePath) {\n        const dependencies = [],\n            fileDirectiveRegex = /([ ]*)(#=\\s*include\\s+<([^>]*)>)/,\n            lines = katana(content);\n        let line = -1, result;\n        while (++line < lines.length) {\n            result = fileDirectiveRegex.exec(lines[line]);\n            if (result !== null) {\n                dependencies.push({\n                    line: line,\n                    scope: result[1],\n                    incPath: result[3],\n                    filePath: filePath //relative\n                });\n            }\n        }\n        return dependencies;\n    },\n\n    /**\n     * Includer class\n     * @param args\n     * @returns {Includer}\n     * @constructor\n     */\n    Includer = function (args) {\n        if (!(this instanceof Includer)) {\n            return new Includer(args);\n        }\n        Transform.call(this, args);\n        this._buff = '';\n        this._ready = false;\n        /**\n         * Transform function\n         * @param chunk\n         * @param encoding\n         * @param done\n         * @returns {Promise.<void>}\n         * @private\n         */\n        Includer.prototype._transform = async function (chunk, encoding, done) {\n            if (this._ready) { // if already included\n                this.push(chunk); // just push through buffer\n                done();\n            } else {\n                // collect string into buffer\n                this._buff = chunk.toString();\n                if (chunk._contents) this._buff = chunk._contents.toString();\n                //change file\n                const src = chunk.history ? chunk.history[0] : files[0];\n                const mainFilePath = path.join('.', src);\n                this._buff = await bouncer(this._buff, mainFilePath).catch((err) => console.log(err));\n                this._ready = true;\n                if (chunk._contents) {\n                    let temp = this._buff;\n                    this._buff = new File();\n                    this._buff.path = path.join(path.resolve('.'), path.basename(mainFilePath));\n                    this._buff.contents = new Buffer(temp, encoding);\n                }\n                this.push(this._buff);\n                this._buff = '';\n                done();\n            }\n        };\n    };\n\nutil.inherits(Includer, Transform);\n\nmodule.exports = {\n    Includer,\n    katana,\n    glue,\n    shifter,\n    bouncer,\n    stringworm,\n    octopus,\n    octopus_whisperer,\n    hr_department\n};"]}